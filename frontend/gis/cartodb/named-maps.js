require('dotenv').config({ silent: true });
/* eslint-disable no-console */
const fetch = require('node-fetch');
const path = require('path');
const writeFileSync = require('fs').writeFileSync;
const ora = require('ora');

const DEFAULT_TYPE = 'tool';

const getCartoUrl = endpoint =>
  `https://${process.env.CARTO_ACCOUNT}.carto.com/${endpoint}?api_key=${process.env.CARTO_TOKEN}`;

const spinner = ora();

function readEnv() {
  const envFlag = process.argv[2];
  if (!envFlag || !envFlag.includes('--env=')) {
    throw new Error('You need to define --env');
  }
  const env = envFlag.split('--env=')[1];
  const typeFlag = process.argv[3];
  const type = (typeFlag && typeFlag.split('--type=')[1]) || DEFAULT_TYPE;
  return { env, type };
}

function classifyTemplates(templates) {
  const { env } = readEnv();
  spinner.start('Fetching existing templates');
  const getTemplates = (existingTemplates = []) => {
    const envTemplates = existingTemplates.filter(template => template.endsWith(`__${env}`));
    const result = templates.reduce(
      (acc, next) => {
        const exists = envTemplates.find(t => next.name === t);
        return {
          ...acc,
          toUpdate: exists ? [...acc.toUpdate, next] : acc.toUpdate,
          toCreate: !exists ? [...acc.toCreate, next] : acc.toCreate
        };
      },
      { toUpdate: [], toCreate: [] }
    );
    const toKeep = [...result.toUpdate, result.toCreate].map(i => i.name);
    result.toRemove = envTemplates.filter(template => !toKeep.includes(template));
    spinner.succeed();
    return result;
  };

  return fetch(getCartoUrl('api/v1/map/named'))
    .then(res => res.json())
    .then(data => getTemplates(data.template_ids))
    .catch(e => console.error(e));
}

function getTemplatesByEnvironment() {
  const { env, type } = readEnv();
  spinner.start(`Reading templates from file system env: ${env} type: ${type}`);
  const templatesPath = path.join(__dirname, type, `templates.${env}.json`);
  // eslint-disable-next-line
  const templates = require(templatesPath);
  spinner.succeed();
  return templates.map(template => ({
    ...template,
    name: `${template.name}__${env}`,
    id: template.name
  }));
}

function update(templates) {
  spinner.start('Updating existing templates');
  const updates = templates.map(template =>
    fetch(getCartoUrl(`api/v1/map/named/${template.name}`), {
      method: 'PUT',
      body: JSON.stringify(template),
      headers: {
        'Content-Type': 'application/json'
      }
    })
  );
  return Promise.all(updates).then(res => spinner.succeed() && res);
}

function create(templates) {
  spinner.start('Creating new templates');
  const updates = templates.map(template =>
    fetch(getCartoUrl('api/v1/map/named'), {
      method: 'POST',
      body: JSON.stringify(template),
      headers: {
        'Content-Type': 'application/json'
      }
    })
  );
  return Promise.all(updates).then(res => spinner.succeed() && res);
}

function instanciate(templates) {
  spinner.start('Instanciating templates');
  const updates = templates.map(template =>
    fetch(getCartoUrl(`api/v1/map/named/${template.name}`), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })
      .then(res => res.json())
      .catch(console.error)
  );
  return Promise.all(updates).then(res => spinner.succeed() && res);
}

function remove(templateNames) {
  spinner.start(`Removing templates: ${JSON.stringify(templateNames, null, '  ')}`);
  const updates = templateNames.map(templateName =>
    fetch(getCartoUrl(`api/v1/map/named/${templateName}`), {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    })
      .then(res => res.text())
      .catch(console.error)
  );
  return Promise.all(updates).then(res => spinner.succeed() && res);
}

function saveTemplates(templates, namedMaps) {
  spinner.start('Saving templates to file system');
  const { env, type } = readEnv();
  const file = path.join(
    __dirname,
    '..',
    '..',
    'scripts',
    'named-maps',
    `${type}_named_maps_carto.js`
  );

  let existingLayers = {};
  try {
    // eslint-disable-next-line
    existingLayers = require(file);
  } catch (e) {
    spinner.info(`${file} not found. Creating one from scratch.`);
  }
  const layers = namedMaps.reduce(
    (acc, next, i) => ({
      ...acc,
      [templates[i].id]: { uid: templates[i].name, layergroupid: next.layergroupid }
    }),
    {}
  );
  const newLayers = {
    ...existingLayers,
    [env]: layers
  };
  const content = `// this file is generated by ${__dirname}/named-maps.js
  module.exports = ${JSON.stringify(newLayers, null, '  ')};
`;
  writeFileSync(file, content);
  spinner.succeed();
}

function applyTemplates(classified) {
  const { toUpdate, toCreate, toRemove } = classified;
  console.log(toUpdate);
  const updated = toUpdate.length > 0 ? update(toUpdate) : [];
  const created = toCreate.length > 0 ? create(toCreate) : [];
  if (toRemove.length > 0) remove(toRemove).catch(console.error);
  Promise.all([updated, created])
    .then(() => instanciate([...toUpdate, ...toCreate]))
    .then(namedMaps => saveTemplates([...toUpdate, ...toCreate], namedMaps))
    .catch(console.error);
}

const allTemplates = getTemplatesByEnvironment();
classifyTemplates(allTemplates).then(applyTemplates);
